.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM2 3"
.TH XML::DOM2 3 "2007-11-29" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  XML::DOM2 \- DOM controlled, strict XML module for extentable xml objects.
.Ve
.SH "VERSION"
.IX Header "VERSION"
Version 0.06 \- 2007\-11\-28
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  my $xml = XML::DOM2\->new( file => \*(Aqfilename.xml\*(Aq );
\&  my $xml = XML::DOM2\->new( data => \*(Aq<xml>data</xml>\*(Aq );
\&  my $xml = XML::DOM2\->new( fh   => $file_handle );
\&
\&  $xml\->getChildren();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  XML::DOM2 is yet _another_ perl XML module.
\&
\&  Features:
\&
\&  * DOM Level2 Compilence in both document, elements and attributes
\&  * NameSpace control for elements and attributes
\&  * XPath (it\*(Aqs just one small method once you have a good DOM)
\&  * Extendability:
\&   * Document, Element or Attribute classes can be used as base class for other
\&         kinds of document, element or attribute.
\&   * Element and Attribute Handler allows element specific child elements and attribute objects.
\&   * Element and Attribute serialisation overiding.
\&  * Parsing with SAX (use XML::SAX::PurePerl for low dependancy installs)
\&  * Internal serialisation
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$class\->new( file|data|fh )"
.el .SS "\f(CW$class\fP\->new( file|data|fh )"
.IX Subsection "$class->new( file|data|fh )"
.Vb 1
\&  Create a new xml object, it will parse a file, data or a file handle if required or will await creation of nodes.
.Ve
.ie n .SS "$object\->parseDocument( %p )"
.el .SS "\f(CW$object\fP\->parseDocument( \f(CW%p\fP )"
.IX Subsection "$object->parseDocument( %p )"
.Vb 1
\&  Parse existing xml data into a document, inputs taken from \->new;
.Ve
.ie n .SS "$object\->xmlify( %options ) =head2 $object\->render( %options ) =head2 $object\->to_xml( %options ) =head2 $object\->serialise( %options ) =head2 $object\->serialize( %options )"
.el .SS "\f(CW$object\fP\->xmlify( \f(CW%options\fP ) =head2 \f(CW$object\fP\->render( \f(CW%options\fP ) =head2 \f(CW$object\fP\->to_xml( \f(CW%options\fP ) =head2 \f(CW$object\fP\->serialise( \f(CW%options\fP ) =head2 \f(CW$object\fP\->serialize( \f(CW%options\fP )"
.IX Subsection "$object->xmlify( %options ) =head2 $object->render( %options ) =head2 $object->to_xml( %options ) =head2 $object->serialise( %options ) =head2 $object->serialize( %options )"
.Vb 1
\&  Returns xml representation of xml document.
\&
\&  Options:
\&        seperator \- default is carage return
.Ve
.ie n .SS "\fI\fP\fI$class\fP\fI\fP\->adaptation( $name, $structure )"
.el .SS "\fI\fP\f(CI$class\fP\fI\fP\->adaptation( \f(CW$name\fP, \f(CW$structure\fP )"
.IX Subsection "$class->adaptation( $name, $structure )"
.Vb 1
\&  Convert a perl structure and create a new xml document of it:
\&
\&        $class\->adaptation(\*(Aqxml\*(Aq, { foo => [ \*(AqA\*(Aq, \*(AqB\*(Aq, \*(AqC\*(Aq ], bar => \*(AqD\*(Aq, kou => { \*(AqA\*(Aq => 1, \*(AqB\*(Aq => 2 } });
\&
\&  Will convert to:
\&
\&        "<xml><foo>A</foo><foo>B</foo><foo>C</foo><bar>D</bar><kou><A>1</A><B>2</B></xml>"
\&
\&        $class\->adaptation(\*(Aqxml\*(Aq, { \*(Aqfoo\*(Aq => [ { \*(Aq+\*(Aq => \*(AqA\*(Aq, \*(Aq_Letter\*(Aq => \*(Aq1\*(Aq }, { \*(Aq+\*(Aq => \*(AqB\*(Aq, \*(Aq_Letter\*(Aq => 2 } ] });
\&
\&        Will convert to:
\&
\&        "<xml><foo Letter="1">A</foo><foo Letter="2">B</foo></xml>"
.Ve
.ie n .SS "$object\->\fIextension()\fP"
.el .SS "\f(CW$object\fP\->\fIextension()\fP"
.IX Subsection "$object->extension()"
.Vb 1
\&  $extention = $xml\->extention();
\&
\&  Does not work, legacy option maybe enabled in later versions.
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.ie n .SS "$object\->namespace( $set )"
.el .SS "\f(CW$object\fP\->namespace( \f(CW$set\fP )"
.IX Subsection "$object->namespace( $set )"
.Vb 1
\&  Default document name space
.Ve
.ie n .SS "$object\->name( $set )"
.el .SS "\f(CW$object\fP\->name( \f(CW$set\fP )"
.IX Subsection "$object->name( $set )"
.Vb 1
\&  Document localName
.Ve
.ie n .SS "$object\->\fIdoctype()\fP"
.el .SS "\f(CW$object\fP\->\fIdoctype()\fP"
.IX Subsection "$object->doctype()"
.Vb 1
\&  Document Type object
.Ve
.ie n .SS "$object\->\fIversion()\fP"
.el .SS "\f(CW$object\fP\->\fIversion()\fP"
.IX Subsection "$object->version()"
.Vb 1
\&  XML Version
.Ve
.ie n .SS "$object\->\fIencoding()\fP"
.el .SS "\f(CW$object\fP\->\fIencoding()\fP"
.IX Subsection "$object->encoding()"
.Vb 1
\&  XML Encoding
.Ve
.ie n .SS "$object\->\fIstandalone()\fP"
.el .SS "\f(CW$object\fP\->\fIstandalone()\fP"
.IX Subsection "$object->standalone()"
.Vb 1
\& XML Standalone
.Ve
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.SS "_serialise_doctype"
.IX Subsection "_serialise_doctype"
\&\f(CW$xml\fR\->_serialise_doctype( seperator => \*(L"\en\*(R" );
.PP
Returns the document type in an xml header form.
.SS "_serialise_extention"
.IX Subsection "_serialise_extention"
\&\f(CW$xml\fR\->_serialise_extention( seperator => \*(L"\en\*(R" );
.PP
Returns the document extentions.
.SS "_serialise_header"
.IX Subsection "_serialise_header"
\&\f(CW$xml\fR\->_serialise_header( );
.PP
The \s-1XML\s0 header, with version, encoding and standalone options.
.SS "_element_handle"
.IX Subsection "_element_handle"
\&\f(CW$xml\fR\->_element_handle( \f(CW$type\fR, \f(CW%element\fR\-options );
.PP
Returns an \s-1XML\s0 element based on \f(CW$type\fR, use to extentd element capabilties.
.ie n .SS "$object\->_option( $name[, $data] )"
.el .SS "\f(CW$object\fP\->_option( \f(CW$name\fP[, \f(CW$data\fP] )"
.IX Subsection "$object->_option( $name[, $data] )"
.Vb 1
\&  Set or get the required option.
.Ve
.ie n .SS "$object\->\fI_can_contain_element()\fP"
.el .SS "\f(CW$object\fP\->\fI_can_contain_element()\fP"
.IX Subsection "$object->_can_contain_element()"
.Vb 1
\&  Does this node support element children.
.Ve
.ie n .SS "$object\->\fI_document_name()\fP"
.el .SS "\f(CW$object\fP\->\fI_document_name()\fP"
.IX Subsection "$object->_document_name()"
.Vb 1
\&  Returns the doctype name or \*(Aqxml\*(Aq as default, can be extended.
.Ve
.ie n .SS "$object\->\fI_credit_comment()\fP"
.el .SS "\f(CW$object\fP\->\fI_credit_comment()\fP"
.IX Subsection "$object->_credit_comment()"
.Vb 1
\&  Returns the comment credit used in the output
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Martin Owens, doctormo@cpan.org
.SH "CREDITS"
.IX Header "CREDITS"
Based on \s-1SVG\s0.pm by Ronan Oger, ronan@roasp.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1),\s-1XML::DOM2\s0,XML::DOM2::Parser
