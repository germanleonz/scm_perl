.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::RPC::Server 3"
.TH Apache::RPC::Server 3 "2011-08-15" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Apache::RPC::Server \- A subclass of RPC::XML::Server tuned for mod_perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    # In httpd.conf:
\&    PerlModule Apache::RPC::Server
\&    PerlSetVar RpcMethodDir /var/www/rpc:/usr/lib/perl5/RPC\-shared
\&    PerlChildInitHandler Apache::RPC::Server\->init_handler
\&    ...
\&    <Location /RPC>
\&        SetHandler perl\-script
\&        PerlHandler Apache::RPC::Server
\&    </Location>
\&    </Location /RPC\-limited>
\&        SetHandler perl\-script
\&        PerlHandler Apache::RPC::Server
\&        PerlSetVar RPCOptPrefix RpcLimit
\&        PerlSetVar RpcLimitRpcServer Limited
\&        PerlSetVar RpcLimitRpcMethodDir /usr/lib/perl5/RPC\-shared
\&    </Location>
\&
\&    # In the start\-up Perl file:
\&    use Apache::RPC::Server;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBApache::RPC::Server\fR module is a subclassing of \fBRPC::XML::Server\fR that
is tuned and designed for use within Apache with mod_perl.
.PP
Provided are phase-handlers for the general request-processing phase
(\f(CW\*(C`PerlHandler\*(C'\fR) and the child-process initialization phase
(\f(CW\*(C`PerlChildInitHandler\*(C'\fR). The module should be loaded either by inclusion in a
server start-up Perl script or by directives in the server configuration file
(generally \fIhttpd.con\fR). One loaded, the configuration file may assign the
module to handle one or more given locations with the general set of
\&\f(CW\*(C`<Location>\*(C'\fR directives and familiar options. Additional configuration
settings specific to this module are detailed below.
.PP
Generally, externally-available methods are provided as files in the \s-1XML\s0
dialect explained in RPC::XML::Server. A subclass derived
from this class may of course use the methods provided by this class and its
parent class for adding and manipulating the method table.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
The methods that the server publishes are provided by a combination of the
installation files and Apache configuration values. Details on remote method
syntax and semantics is covered in RPC::XML::Server.
.SS "Methods"
.IX Subsection "Methods"
In addition to inheriting all the methods from \fBRPC::XML::Server\fR, the
following methods are either added or overloaded by \fBApache::RPC::Server\fR:
.IP "handler" 4
.IX Item "handler"
This is the default content-handler routine that \fBmod_perl\fR expects when the
module is defined as managing the specified location. This is provided as a
\&\fImethod handler\fR, meaning that the first argument is either an object
reference or a static string with the class name. This allows for other
packages to easily subclass \fBApache::RPC::Server\fR.
.Sp
This routine takes care of examining the incoming request, choosing an
appropriate server object to actually process the request, and returning the
results of the remote method call to the client.
.IP "init_handler" 4
.IX Item "init_handler"
This is another Apache-level handler, this one designed for installation as a
\&\f(CW\*(C`PerlChildInitHandler\*(C'\fR. At present, its only function is to iterate over all
server object currently in the internal tables and invoke the \f(CW\*(C`child_started\*(C'\fR
method (detailed below) on each. Setting this handler assures that each child
has a correct impression of when it started as opposed to the start time of the
server itself.
.Sp
Note that this is only applied to those servers known to the master Apache
process. In most cases, this will only be the default server object as
described above. That is because of the delayed-loading nature of all servers
beyond the default, which are likely only in child-specific memory. There are
some configuration options described in the next section that can affect and
alter this.
.IP "new(\s-1HASH\s0)" 4
.IX Item "new(HASH)"
This is the class constructor. It calls the superclass \f(CW\*(C`new\*(C'\fR method, then
performs some additional steps. These include installing the default methods
(which includes an Apache-specific version of \f(CW\*(C`system.status\*(C'\fR), adding the
installation directory of this module to the method search path, and adding any
directories or explicitly-requested methods to the server object.
.Sp
The arguments to the constructor are regarded as a hash table (not a hash
reference), and are mostly passed unchanged to the constructor for
\&\fBRPC::XML::Server\fR. Three parameters are of concern to this class:
.RS 4
.IP "apache" 8
.IX Item "apache"
The value associated with this key is a reference to an \fBApache\fR request
object. If this is not passed, then it is assumed that this is being called in
the start-up phase of the server and the value returned from
\&\f(CW\*(C`Apache\->server\*(C'\fR (see Apache) is used.
.IP "server_id" 8
.IX Item "server_id"
This provides the server \s-1ID\s0 string for the \s-1RPC\s0 server (not to be confused with
the Apache server) that is being configured.
.IP "prefix" 8
.IX Item "prefix"
The prefix is used in retrieving certain configuration settings from the Apache
configuration file.
.RE
.RS 4
.Sp
The server identification string and prefix concepts are explained in more
detail in the next section. See RPC::XML::Server for a full
list of what additional arguments may be passed to \fBnew\fR for eventual proxy to
the parent class constructor.
.RE
.IP "child_started([\s-1BOOLEAN\s0])" 4
.IX Item "child_started([BOOLEAN])"
This method is very similar to the \f(CW\*(C`started\*(C'\fR method provided by
\&\fBRPC::XML::Server\fR. When called with no argument or an argument that evaluates
to a false value, it returns the UNIX-style time value of when this child
process was started. Due to the child-management model of Apache, this may very
well be different from the value returned by \f(CW\*(C`started\*(C'\fR itself. If given an
argument that evaluates as true, the current system time is set as the new
child-start time.
.Sp
If the server has not been configured to set this at child initialization, then
the main \f(CW\*(C`started\*(C'\fR value is returned. The name is different so that a child
may specify both server-start and child-start times with clear distinction.
.IP "get_server(APACHEREQ|STRING)" 4
.IX Item "get_server(APACHEREQ|STRING)"
Get the server object that corresponds to the argument passed. If the argument
is a reference to an \fBApache\fR request object, use it to determine the name
(by path, etc.) and return that object. If the parameter is not a reference,
it is assumed to be the specific name desired.
.Sp
If the requested server object does not yet exist, an attempt will be made to
create it and add it to the internal table. The newly-created object is then
returned.
.IP "list_servers" 4
.IX Item "list_servers"
Return a list of the \fInames\fR used for all the current server instances. Does
not return the server objects themselves (use \fBget_server\fR, above, for that).
.IP "version" 4
.IX Item "version"
This method behaves exactly like the \fBRPC::XML::Server\fR method, except that
the version string returned is specific to this module instead.
.IP "\s-1INSTALL_DIR\s0" 4
.IX Item "INSTALL_DIR"
As with \fBversion\fR, this is an overload of the parent-class static method that
returns the installation directory of this particular module.
.SS "Apache configuration semantics"
.IX Subsection "Apache configuration semantics"
In addition to the known directives such as \f(CW\*(C`PerlHandler\*(C'\fR and
\&\f(CW\*(C`PerlChildInitHandler\*(C'\fR, configuration of this system is controlled through a
variety of settings that are manipulated with the \f(CW\*(C`PerlSetVar\*(C'\fR and
\&\f(CW\*(C`PerlAddVar\*(C'\fR directives. These variables are:
.IP "RPCOptPrefix [\s-1STRING\s0]" 4
.IX Item "RPCOptPrefix [STRING]"
Sets a prefix string to be applied to all of the following names before trying
to read their values. Useful for setting within a \f(CW\*(C`<Location>\*(C'\fR block
to ensure that no settings from a higher point in the hierarchy influence the
server being defined.
.IP "RpcServer [\s-1STRING\s0]" 4
.IX Item "RpcServer [STRING]"
Specify the name of the server to use for this location. If not passed, then
the default server is used. This server may also be explicitly requested by the
name "\f(CW\*(C`\f(CW\*(C`<default>\*(C'\f(CW\*(C'\fR". If more than one server is going to be created
within the same Apache environment, this setting should always be used outside
the default area so that the default server is not loaded down with extra
method definitions. If a sub-location changes the default server, those changes
will be felt by any location that uses that server.
.Sp
Different locations may share the same server by specifying the name with this
variable. This is useful for managing varied access schemes, traffic analysis,
etc.
.IP "RpcMethodDir [\s-1DIRECTORY\s0]" 4
.IX Item "RpcMethodDir [DIRECTORY]"
This variable specifies directories to be scanned for method \f(CW\*(C`*.xpl\*(C'\fR
files. To specify more than one directory, separate them with "\f(CW\*(C`:\*(C'\fR" just as
with any other directory-path expression. All directories are kept (in the
order specified) as the search path for future loading of methods.
.IP "RpcMethod [\s-1FILENAME\s0]" 4
.IX Item "RpcMethod [FILENAME]"
This is akin to the directory-specification option above, but only provides a
single method at a time. It may also have multiple values separated by
colons. The method is loaded into the server table. If the name is not an
absolute pathname, then it is searched for in the directories that currently
comprise the path. The directories above, however, have not been added to the
search path yet. This is because these directives are processed immediately
after the directory specifications, and thus do not need to be searched. This
directive is designed to allow selective overriding of methods in the
previously-specified directories.
.IP "RpcDefMethods [YES|NO]" 4
.IX Item "RpcDefMethods [YES|NO]"
If specified and set to \*(L"no\*(R" (case-insensitive), suppresses the loading of the
system default methods that are provided with this package. The absence of this
setting is interpreted as a \*(L"yes\*(R", so explicitly specifying such is not needed.
.IP "RpcAutoMethods [YES|NO]" 4
.IX Item "RpcAutoMethods [YES|NO]"
If specified and set to \*(L"yes\*(R", enables the automatic searching for a requested
remote method that is unknown to the server object handling the request. If
set to \*(L"no\*(R" (or not set at all), then a request for an unknown function causes
the object instance to report an error. If the routine is still not found, the
error is reported. Enabling this is a security risk, and should only be
permitted by a server administrator with fully informed acknowledgement and
consent.
.IP "RpcAutoUpdates [YES|NO]" 4
.IX Item "RpcAutoUpdates [YES|NO]"
If specified and set to \*(L"yes\*(R", enables the checking of the modification time
of the file from which a method was originally loaded. If the file has
changed, the method is re-loaded before execution is handed off. As with the
auto-loading of methods, this represents a potential security risk, and should
only be permitted by a server administrator with fully informed
acknowledgement and consent.
.SS "Specifying methods to the server(s)"
.IX Subsection "Specifying methods to the server(s)"
Methods are provided to an \fBApache::RPC::Server\fR object in three ways:
.IP "Default methods" 4
.IX Item "Default methods"
Unless suppressed by a \f(CW\*(C`RpcDefMethods\*(C'\fR option, the methods shipped with this
package are loaded into the table. The \fBApache::RPC::Server\fR objects get a
slightly different version of \f(CW\*(C`system.status\*(C'\fR than the parent class does.
.IP "Configured directories" 4
.IX Item "Configured directories"
All method files (those ending in a suffix of \f(CW\*(C`*.xpl\*(C'\fR) in the directories
specified in the relevant \f(CW\*(C`RpcMethodDir\*(C'\fR settings are read next. These
directories are also (after the next step) added to the search path the object
uses.
.IP "By specific inclusion" 4
.IX Item "By specific inclusion"
Any methods specified directly by use of \f(CW\*(C`RpcMethod\*(C'\fR settings are loaded
last. This allows for them to override methods that may have been loaded from
the system defaults or the specified directories.
.PP
If a request is made for an unknown method, the object will first attempt to
find it by searching the path of directories that were given in the
configuration as well as those that are part of the system (installation-level
directories). If it is still not found, then an error is reported back to the
requestor. By using this technique, it is possible to add methods to a running
server without restarting it. It is a potential security hole, however, and it
is for that reason that the previously-documented \f(CW\*(C`RpcAutoMethods\*(C'\fR setting is
provided.
.SS "Usage Within <Perl> Sections"
.IX Subsection "Usage Within <Perl> Sections"
To truly unlock the power of having the \s-1RPC\s0 server attached to a \fBmod_perl\fR
environment, the application and configuration of the server should be done
within Perl-configuration blocks on the Apache server itself.
.PP
In doing this, two immediate benefits are gained:
.IP "(1)" 4
.IX Item "(1)"
The rpc-server object gets created in the master Apache process, rather than
within each child as a side-effect of the first request.  Especially in cases
where there are going to be more than one server in use within the Apache
environment, this boosts performance by allowing newly-created children to
already have the server object and method table readily available.
.IP "(2)" 4
.IX Item "(2)"
It becomes possible to exert more detailed control over the creation and
configuration of each server object. Combining the \fBget_method\fR and
\&\fBadd_method\fR operations permits \*(L"sharing\*(R" (of a sort) of methods between
server objects. Recall from the \fBRPC::XML::Server\fR documentation that, when a
method is invoked, the first argument is the server object that is marshalling
it.
.PP
The following example illustrates these concepts in a fairly simple
environment:
.PP
.Vb 2
\&    # In httpd.conf:
\&    <Perl>
\&
\&    # First, create and configure some Apache::RPC::Server objects
\&
\&    # One regular one, with the standard settings:
\&    $main::defobj = Apache::RPC::Server\->new(path         => \*(Aq/RPC\*(Aq,
\&                                             auto_methods => 1,
\&                                             auto_updates => 1);
\&    # One version without the default methods, and no auto\-actions
\&    $main::secobj = Apache::RPC::Server\->new(no_default => 1,
\&                                             path => \*(Aq/rpc\-secured\*(Aq);
\&
\&    # Imagine that add_method and/or add_methods_in_dir has been used to
\&    # add to the methods tables for those objects. Now assign them to
\&    # locations managed by Apache:
\&    $Location{\*(Aq/RPC\*(Aq} =
\&        {
\&            SetHandler  => \*(Aqperl\-script\*(Aq,
\&            PerlHandler => \*(Aq$main::defobj\*(Aq
\&        };
\&    $Location{\*(Aq/rpc\-secure\*(Aq} =
\&        {
\&            SetHandler   => \*(Aqperl\-script\*(Aq,
\&            PerlHandler  => \*(Aq$main::secobj\*(Aq,
\&            AuthUserFile => \*(Aq/etc/some_file\*(Aq,
\&            AuthType     => \*(AqBasic\*(Aq,
\&            AuthName     => \*(AqSecuredRPC\*(Aq,
\&            \*(Aqrequire\*(Aq    => \*(Aqvalid\-user\*(Aq
\&        };
\&
\&    </Perl>
.Ve
.PP
Note that the assignment of the \f(CW\*(C`PerlHandler\*(C'\fR value was a string
representation of the object reference itself. \fBmod_perl\fR performs a sort of
\&\*(L"thaw\*(R" of this string when the location is accessed. Since this class
implements itself as a \fImethod handler\fR, this causes the \f(CW\*(C`handler()\*(C'\fR method
for each of the locations to be handed the \fBApache::RPC::Server\fR object
directly. Note also that the value assigned to \f(CW\*(C`PerlHandler\*(C'\fR cannot be a
lexical variable, or it will be out of scope when the handler is called.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
All methods return some type of reference on success, or an error string on
failure. Non-reference return values should always be interpreted as errors
unless otherwise noted.
.PP
Where appropriate, the \f(CW\*(C`log_error\*(C'\fR method from the \fBApache\fR package
is called to note internal errors.
.SH "CAVEATS"
.IX Header "CAVEATS"
This began as a reference implementation in which clarity of process and
readability of the code took precedence over general efficiency. It is now
being maintained as production code, but may still have parts that could be
written more efficiently.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-rpc\-xml at rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=RPC\-XML <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=RPC-XML>. I will be
notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=RPC\-XML <http://rt.cpan.org/NoAuth/Bugs.html?Dist=RPC-XML>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/RPC\-XML <http://annocpan.org/dist/RPC-XML>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/RPC\-XML <http://cpanratings.perl.org/d/RPC-XML>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/RPC\-XML <http://search.cpan.org/dist/RPC-XML>
.IP "\(bu" 4
MetaCPAN
.Sp
https://metacpan.org/release/RPC\-XML <https://metacpan.org/release/RPC-XML>
.IP "\(bu" 4
Source code on GitHub
.Sp
http://github.com/rjray/rpc\-xml <http://github.com/rjray/rpc-xml>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This file and the code within are copyright (c) 2011 by Randy J. Ray.
.PP
Copying and distribution are permitted under the terms of the Artistic
License 2.0 (http://www.opensource.org/licenses/artistic\-license\-2.0.php <http://www.opensource.org/licenses/artistic-license-2.0.php>) or
the \s-1GNU\s0 \s-1LGPL\s0 2.1 (http://www.opensource.org/licenses/lgpl\-2.1.php <http://www.opensource.org/licenses/lgpl-2.1.php>).
.SH "CREDITS"
.IX Header "CREDITS"
The \fBXML-RPC\fR standard is Copyright (c) 1998\-2001, UserLand Software, Inc.
See <http://www.xmlrpc.com> for more information about the \fBXML-RPC\fR
specification.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RPC::XML::Server, \s-1RPC::XML\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy J. Ray \f(CW\*(C`<rjray@blackperl.com>\*(C'\fR
