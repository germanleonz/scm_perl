.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RPC::XML::Server 3"
.TH RPC::XML::Server 3 "2012-08-29" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RPC::XML::Server \- A server base\-class for XML\-RPC
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use RPC::XML::Server;
\&
\&    ...
\&    $srv = RPC::XML::Server\->new(port => 9000);
\&    # Several of these, most likely:
\&    $srv\->add_method(...);
\&    ...
\&    $srv\->server_loop; # Never returns
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is both a base-class for developing XML-RPC servers, and a working server
class in its own right. It is built upon the \fB\s-1RPC::XML\s0\fR data classes, and
defaults to using \fBHTTP::Daemon\fR for the communication layer.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
Use of the \fBRPC::XML::Server\fR is based on an object model. A server is
instantiated from the class, methods (subroutines) are made public by adding
them through the object interface, and then the server object is responsible
for dispatching requests (and possibly for the \s-1HTTP\s0 listening, as well).
.SS "Static Methods"
.IX Subsection "Static Methods"
These methods are static to the package, and are used to provide external
access to internal settings:
.IP "\s-1INSTALL_DIR\s0" 4
.IX Item "INSTALL_DIR"
Returns the directory that this module is installed into. This is used by
methods such as \fBadd_default_methods\fR to locate the \s-1XPL\s0 files that are
shipped with the distribution.
.IP "version" 4
.IX Item "version"
Returns the version string associated with this package.
.IP "product_tokens" 4
.IX Item "product_tokens"
This returns the identifying string for the server, in the format
\&\f(CW\*(C`NAME/VERSION\*(C'\fR consistent with other applications such as Apache and
\&\fB\s-1LWP\s0\fR. It is provided here as part of the compatibility with \fBHTTP::Daemon\fR
that is required for effective integration with \fBNet::Server\fR.
.SS "Methods"
.IX Subsection "Methods"
The following are object (non-static) methods. Unless otherwise explicitly
noted, all methods return the invoking object reference upon success, and a
non-reference error string upon failure.
.PP
See \*(L"Content Compression\*(R" below for details of how the server class manages
gzip-based compression and expansion of messages.
.IP "new(\s-1OPTIONS\s0)" 4
.IX Item "new(OPTIONS)"
Creates a new object of the class and returns the blessed reference. Depending
on the options, the object will contain some combination of an \s-1HTTP\s0 listener, a
pre-populated \fBHTTP::Response\fR object, a \fBRPC::XML::ParserFactory\fR\-generated
object, and a dispatch table with the set of default procedures pre-loaded. The
options that \fBnew\fR accepts are passed as a hash of key/value pairs (not a hash
reference).  The accepted options are:
.RS 4
.IP "\fBno_http\fR" 4
.IX Item "no_http"
If passed with a \f(CW\*(C`true\*(C'\fR value, prevents the creation and storage of the
\&\fBHTTP::Daemon\fR object. This allows for deployment of a server object in other
environments. Note that if this is set, the \fBserver_loop\fR method described
below will silently attempt to use the \fBNet::Server\fR module.
.IP "\fBno_default\fR" 4
.IX Item "no_default"
If passed with a \f(CW\*(C`true\*(C'\fR value, prevents the loading of the default procedures
provided with the \fB\s-1RPC::XML\s0\fR distribution. These may be later loaded using
the \fBadd_default_methods\fR interface described later. The procedures themselves
are described below (see \*(L"The Default Procedures Provided\*(R").
.IP "\fBpath\fR" 4
.IX Item "path"
.PD 0
.IP "\fBhost\fR" 4
.IX Item "host"
.IP "\fBport\fR" 4
.IX Item "port"
.IP "\fBqueue\fR" 4
.IX Item "queue"
.PD
These four are specific to the HTTP-based nature of the server.  The \fBpath\fR
argument sets the additional \s-1URI\s0 path information that clients would use to
contact the server.  Internally, it is not used except in outgoing status and
introspection reports.  The \fBhost\fR, \fBport\fR and \fBqueue\fR arguments are passed
to the \fBHTTP::Daemon\fR constructor if they are passed. They set the hostname,
\&\s-1TCP/IP\s0 port, and socket listening queue, respectively. They may also be used
if the server object tries to use \fBNet::Server\fR as an alternative server
core.
.IP "\fBxpl_path\fR" 4
.IX Item "xpl_path"
If you plan to add procedures/methods/functions to the server object by passing
filenames to the \fBadd_method\fR/\fBadd_procedure\fR/\fBadd_function\fR calls, this
argument may be used to specify one or more additional directories to be
searched when the passed-in filename is a relative path. The value for this
must be an array reference. See also the \fBadd_*\fR and \fBxpl_path\fR methods,
below.
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
Specify a value (in seconds) for the \fBHTTP::Daemon\fR server to use as a
timeout value when reading request data from an inbound connection. The
default value is 10 seconds. This value is not used except by \fBHTTP::Daemon\fR.
.IP "\fBauto_methods\fR" 4
.IX Item "auto_methods"
If specified and set to a true value, enables the automatic searching for a
requested remote method/procedure/function that is unknown to the server object
handling the request. If set to \*(L"no\*(R" (or not set at all), then a request for an
unknown function causes the object instance to report an error. If the routine
is still not found, the error is reported. Enabling this is a security risk,
and should only be permitted by a server administrator with fully informed
acknowledgement and consent.
.IP "\fBauto_updates\fR" 4
.IX Item "auto_updates"
If specified and set to a \*(L"true\*(R" value, enables the checking of the
modification time of the file from which a method/procedure/function was
originally loaded. If the file has changed, the method is re-loaded before
execution is handed off. As with the auto-loading of methods, this represents a
security risk, and should only be permitted by a server administrator with
fully informed acknowledgement and consent.
.IP "\fBparser\fR" 4
.IX Item "parser"
If this parameter is passed, its value is expected to be an array
reference. The contents of that array are passed to the \fBnew\fR method of the
\&\fBRPC::XML::ParserFactory\fR class, which creates the parser object that the
server object caches for its use.  See the \fBRPC::XML::ParserFactory\fR manual
page for a list of recognized parameters to the constructor.
.IP "\fBmessage_file_thresh\fR" 4
.IX Item "message_file_thresh"
If this key is passed, the value associated with it is assumed to be a
numerical limit to the size of in-memory messages. Any out-bound request that
would be larger than this when stringified is instead written to an anonynous
temporary file, and spooled from there instead. This is useful for cases in
which the request includes \fBRPC::XML::base64\fR objects that are themselves
spooled from file-handles. This test is independent of compression, so even
if compression of a request would drop it below this threshhold, it will be
spooled anyway. The file itself is created via File::Temp with \f(CW\*(C`UNLINK\*(C'\fR set,
so once it is freed the disk space is immediately freed.
.IP "\fBmessage_temp_dir\fR" 4
.IX Item "message_temp_dir"
If a message is to be spooled to a temporary file, this key can define a
specific directory in which to open those files. If this is not given, then
the \f(CW\*(C`tmpdir\*(C'\fR method from the \fBFile::Spec\fR package is used, instead.
.IP "\fBfault_code_base\fR" 4
.IX Item "fault_code_base"
Specify a base integer value that is added to the numerical codes for all
faults the server can return. See \*(L"Server Faults\*(R" for the list of faults
that are built-in to the server class. This allows an application to \*(L"move\*(R"
the \fBRPC::XML::Server\fR pre-defined fault codes out of the way of codes that
the application itself may generate.
.Sp
Note that this value is \fBnot\fR applied to any faults specified via the next
option, \f(CW\*(C`fault_table\*(C'\fR. It is assumed that the developer has already applied
any offset to those codes.
.IP "\fBfault_table\fR" 4
.IX Item "fault_table"
Specify one or more fault types to either add to or override the built-in set
of faults for the server object. The value of this parameter is a hash
reference whose keys are the fault type and whose values are either a scalar
(which is taken to be the numerical code) or a list reference with two elements
(the code followed by the string). See \*(L"Server Faults\*(R" for the list of
faults that are built-in to the server class, and for more information on
defining your own.
.RE
.RS 4
.Sp
Any other keys in the options hash not explicitly used by the constructor are
copied over verbatim onto the object, for the benefit of sub-classing this
class. All internal keys are prefixed with \f(CW\*(C`_\|_\*(C'\fR to avoid confusion. Feel
free to use this prefix only if you wish to re-introduce confusion.
.RE
.IP "url" 4
.IX Item "url"
This returns the \s-1HTTP\s0 \s-1URL\s0 that the server will be responding to, when it is in
the connection-accept loop. If the server object was created without a
built-in \s-1HTTP\s0 listener, then this method returns \f(CW\*(C`undef\*(C'\fR.
.IP "requests" 4
.IX Item "requests"
Returns the number of requests this server object has marshalled. Note that in
multi-process environments (such as Apache or Net::Server::PreFork) the value
returned will only reflect the messages dispatched by the specific process
itself.
.IP "response" 4
.IX Item "response"
Each instance of this class (and any subclasses that do not completely
override the \f(CW\*(C`new\*(C'\fR method) creates and stores an instance of
\&\fBHTTP::Response\fR, which is then used by the \fBHTTP::Daemon\fR or \fBNet::Server\fR
processing loops in constructing the response to clients. The response object
has all common headers pre-set for efficiency. This method returns a reference
to that object.
.IP "started([\s-1BOOL\s0])" 4
.IX Item "started([BOOL])"
Gets and possibly sets the clock-time when the server starts accepting
connections. If a value is passed that evaluates to true, then the current
clock time is marked as the starting time. In either case, the current value
is returned. The clock-time is based on the internal \fBtime\fR command of Perl,
and thus is represented as an integer number of seconds since the system
epoch. Generally, it is suitable for passing to either \fBlocaltime\fR or to the
\&\f(CW\*(C`time2iso8601\*(C'\fR routine exported by the \fB\s-1RPC::XML\s0\fR package.
.IP "timeout(\s-1INT\s0)" 4
.IX Item "timeout(INT)"
You can call this method to set the timeout of new connections after
they are received.  This function returns the old timeout value.  If
you pass in no value then it will return the old value without
modifying the current value.  The default value is 10 seconds.
.IP "server_fault(\s-1STRING\s0, \s-1STRING\s0)" 4
.IX Item "server_fault(STRING, STRING)"
Create a \fBRPC::XML::fault\fR object of the specified type, optionally including
the second (string) parameter. See \*(L"Server Faults\*(R" for the list of faults
defined by \fBRPC::XML::Server\fR (as well as documentation on creating your
own).
.IP "add_method(\s-1FILE\s0 | \s-1HASHREF\s0 | \s-1OBJECT\s0)" 4
.IX Item "add_method(FILE | HASHREF | OBJECT)"
.PD 0
.IP "add_procedure(\s-1FILE\s0 | \s-1HASHREF\s0 | \s-1OBJECT\s0)" 4
.IX Item "add_procedure(FILE | HASHREF | OBJECT)"
.IP "add_function(\s-1FILE\s0 | \s-1HASHREF\s0 | \s-1OBJECT\s0)" 4
.IX Item "add_function(FILE | HASHREF | OBJECT)"
.PD
This adds a new published method/procedure/function to the server object that
invokes it. The new method may be specified in one of three ways: as a
filename, a hash reference or an existing object (generally of either
\&\fBRPC::XML::Procedure\fR, \fBRPC::XML::Method\fR or \fBRPC::XML::Function\fR classes).
.Sp
If passed as a hash reference, the following keys are expected:
.RS 4
.IP "\fBname\fR" 4
.IX Item "name"
The published (externally-visible) name for the method.
.IP "\fBversion\fR" 4
.IX Item "version"
An optional version stamp. Not used internally, kept mainly for informative
purposes.
.IP "\fBhidden\fR" 4
.IX Item "hidden"
If passed and evaluates to a \f(CW\*(C`true\*(C'\fR value, then the method should be hidden
from any introspection \s-1API\s0 implementations. This parameter is optional, the
default behavior being to make the method publically-visible.
.IP "\fBcode\fR" 4
.IX Item "code"
A code reference to the actual Perl subroutine that handles this method. A
symbolic reference is not accepted. The value can be passed either as a
reference to an existing routine, or possibly as a closure. See \*(L"How
Procedures are Called\*(R" for the semantics the referenced subroutine must
follow.
.IP "\fBsignature\fR" 4
.IX Item "signature"
A list reference of the signatures by which this routine may be invoked. Every
method has at least one signature. Though less efficient for cases of exactly
one signature, a list reference is always used for sake of consistency.
.IP "\fBhelp\fR" 4
.IX Item "help"
Optional documentation text for the method. This is the text that would be
returned, for example, by a \fBsystem.methodHelp\fR call (providing the server
has such an externally-visible method).
.RE
.RS 4
.Sp
If a file is passed, then it is expected to be in the XML-based format,
described in the \fBRPC::XML::Procedure\fR page (see
RPC::XML::Procedure).  If the name passed is not an
absolute pathname, then the file will be searched for in any directories
specified when the object was instantiated, then in the directory into which
this module was installed, and finally in the current working directory. If the
operation fails, the return value will be a non-reference, an error
message. Otherwise, the return value is the object reference.
.Sp
The \fBadd_method\fR, \fBadd_function\fR and \fBadd_procedure\fR calls are essentialy
identical unless called with hash references. Both files and objects contain
the information that defines the type (method vs. procedure) of the
funtionality to be added to the server. If \fBadd_method\fR is called with a file
that describes a procedure, the resulting addition to the server object will be
a \fBRPC::XML::Procedure\fR object, not a method object.
.Sp
For more on the creation and manipulation of procedures and methods as
objects, see RPC::XML::Procedure.
.RE
.IP "delete_method(\s-1NAME\s0)" 4
.IX Item "delete_method(NAME)"
.PD 0
.IP "delete_procedure(\s-1NAME\s0)" 4
.IX Item "delete_procedure(NAME)"
.IP "delete_function(\s-1NAME\s0)" 4
.IX Item "delete_function(NAME)"
.PD
Delete the named method/procedure/function from the calling object. Removes the
entry from the internal table that the object maintains. If the method is
shared across more than one server object (see \*(L"share_methods\*(R"), then the
underlying object for it will only be destroyed when the last server object
releases it. On error (such as no method by that name known), an error string
is returned.
.Sp
The \fBdelete_procedure\fR and \fBdelete_function\fR calls are identical, supplied
for the sake of symmetry. All calls return the matched object regardless of its
underlying type.
.IP "list_methods" 4
.IX Item "list_methods"
.PD 0
.IP "list_procedures" 4
.IX Item "list_procedures"
.IP "list_functions" 4
.IX Item "list_functions"
.PD
This returns a list of the names of methods and procedures the server current
has published.  Note that the returned values are not the method objects, but
rather the names by which they are externally known. The \*(L"hidden\*(R" status of a
method is not consulted when this list is created; all methods and procedures
known are listed. The list is not sorted in any specific order.
.Sp
The \fBlist_procedures\fR and \fBlist_functions\fR calls are provided for
symmetry. All calls list all published routines on the calling server object,
regardless of underlying type.
.IP "xpl_path([\s-1LISTREF\s0])" 4
.IX Item "xpl_path([LISTREF])"
Get and/or set the object-specific search path for \f(CW\*(C`*.xpl\*(C'\fR files (files that
specify methods) that are specified in calls to \fBadd_method\fR, above. If a
list reference is passed, it is installed as the new path (each element of the
list being one directory name to search). Regardless of argument, the current
path is returned as a list reference. When a file is passed to \fBadd_method\fR,
the elements of this path are searched first, in order, before the
installation directory or the current working directory are searched.
.IP "get_method(\s-1NAME\s0)" 4
.IX Item "get_method(NAME)"
.PD 0
.IP "get_procedure(\s-1NAME\s0)" 4
.IX Item "get_procedure(NAME)"
.IP "get_function(\s-1NAME\s0)" 4
.IX Item "get_function(NAME)"
.PD
Returns a reference to an object of the class \fBRPC::XML::Method\fR,
\&\fBRPC::XML::Function\fR or \fBRPC::XML::Procedure\fR, which is the current binding
for the published method \s-1NAME\s0. If there is no such method known to the server,
then \f(CW\*(C`undef\*(C'\fR is returned. Note that this is a referent to the object as stored
on the server object itself, and thus changes to it could affect the behavior
of the server.
.Sp
The \fBget_procedure\fR and \fBget_function\fR calls are provided for symmetry. All
will return the same object for \s-1NAME\s0, regardless of the underlying type.
.IP "server_loop(\s-1HASH\s0)" 4
.IX Item "server_loop(HASH)"
Enters the connection-accept loop, which generally does not return. This is
the \f(CW\*(C`accept()\*(C'\fR\-based loop of \fBHTTP::Daemon\fR if the object was created with
an instance of that class as a part. Otherwise, this enters the run-loop of
the \fBNet::Server\fR class. It listens for requests, and marshalls them out via
the \f(CW\*(C`dispatch\*(C'\fR method described below. It answers HTTP-HEAD requests
immediately (without counting them on the server statistics) and efficiently
by using a cached \fBHTTP::Response\fR object.
.Sp
Because infinite loops requiring a \f(CW\*(C`HUP\*(C'\fR or \f(CW\*(C`KILL\*(C'\fR signal to terminate are
generally in poor taste, the \fBHTTP::Daemon\fR side of this sets up a localized
signal handler which causes an exit when triggered. By default, this is
attached to the \f(CW\*(C`INT\*(C'\fR signal. If the \fBNet::Server\fR module is being used
instead, it provides its own signal management.
.Sp
The arguments, if passed, are interpreted as a hash of key/value options (not
a hash reference, please note). For \fBHTTP::Daemon\fR, only one is recognized:
.RS 4
.IP "\fBsignal\fR" 4
.IX Item "signal"
If passed, should be the traditional name for the signal that should be bound
to the exit function. If desired, a reference to an array of signal names may
be passed, in which case all signals will be given the same handler. The user
is responsible for not passing the name of a non-existent signal, or one that
cannot be caught. If the value of this argument is 0 (a \f(CW\*(C`false\*(C'\fR value) or the
string \f(CW\*(C`NONE\*(C'\fR, then the signal handler will \fInot\fR be installed, and the
loop may only be broken out of by killing the running process (unless other
arrangements are made within the application).
.RE
.RS 4
.Sp
The options that \fBNet::Server\fR responds to are detailed in the manual pages
for that package. All options passed to \f(CW\*(C`server_loop\*(C'\fR in this situation are
passed unaltered to the \f(CW\*(C`run()\*(C'\fR method in \fBNet::Server\fR.
.RE
.IP "dispatch(\s-1REQUEST\s0)" 4
.IX Item "dispatch(REQUEST)"
This is the server method that actually manages the marshalling of an incoming
request into an invocation of a Perl subroutine. The parameter passed in may
be one of: a scalar containing the full \s-1XML\s0 text of the request, a scalar
reference to such a string, or a pre-constructed \fBRPC::XML::request\fR object.
Unless an object is passed, the text is parsed with any errors triggering an
early exit. Once the object representation of the request is on hand, the
parameter data is extracted, as is the method name itself. The call is sent
along to the appropriate subroutine, and the results are collated into an
object of the \fBRPC::XML::response\fR class, which is returned. Any non-reference
return value should be presumed to be an error string.
.Sp
The dispatched method may communicate error in several ways.  First, any
non-reference return value is presumed to be an error string, and is encoded
and returned as an \fBRPC::XML::fault\fR response.  The method is run under an
\&\f(CW\*(C`eval()\*(C'\fR, so errors conveyed by \f(CW$@\fR are similarly encoded and returned.  As
a special case, a method may explicitly \f(CW\*(C`die()\*(C'\fR with a fault response, which
is passed on unmodified.
.IP "add_default_methods([\s-1DETAILS\s0])" 4
.IX Item "add_default_methods([DETAILS])"
This method adds all the default methods (those that are shipped with this
extension) to the calling server object. The files are denoted by their
\&\f(CW\*(C`*.xpl\*(C'\fR extension, and are installed into the same directory as this
\&\fBServer.pm\fR file. The set of default methods are described below (see
\&\*(L"The Default Methods Provided\*(R").
.Sp
If any names are passed as a list of arguments to this call, then only those
methods specified are actually loaded. If the \f(CW\*(C`*.xpl\*(C'\fR extension is absent on
any of these names, then it is silently added for testing purposes. Note that
the methods shipped with this package have file names without the leading
\&\f(CW\*(C`status.\*(C'\fR part of the method name. If the very first element of the list of
arguments is \f(CW\*(C`except\*(C'\fR (or \f(CW\*(C`\-except\*(C'\fR), then the rest of the list is
treated as a set of names to \fInot\fR load, while all others do get read. The
\&\fBApache::RPC::Server\fR module uses this to prevent the loading of the default
\&\f(CW\*(C`system.status\*(C'\fR method while still loading all the rest of the defaults. (It
then provides a more Apache-centric status method.)
.Sp
Note that there are no symmetric calls in this case. The provided \s-1API\s0 is
implemented as methods, and thus only this interface is provided.
.IP "add_methods_in_dir(\s-1DIR\s0 [, \s-1DETAILS\s0])" 4
.IX Item "add_methods_in_dir(DIR [, DETAILS])"
.PD 0
.IP "add_procedures_in_dir(\s-1DIR\s0 [, \s-1DETAILS\s0])" 4
.IX Item "add_procedures_in_dir(DIR [, DETAILS])"
.IP "add_functions_in_dir(\s-1DIR\s0 [, \s-1DETAILS\s0])" 4
.IX Item "add_functions_in_dir(DIR [, DETAILS])"
.PD
This is exactly like \fBadd_default_methods\fR above, save that the caller
specifies which directory to scan for \f(CW\*(C`*.xpl\*(C'\fR files. In fact, the
\&\fBadd_default_methods\fR routine simply calls this routine with the installation
directory as the first argument. The definition of the additional arguments is
the same as above.
.Sp
\&\fBadd_procedures_in_dir\fR and \fBadd_functions_in_dir\fR are provided for symmetry.
.IP "share_methods(\s-1SERVER\s0, \s-1NAMES\s0)" 4
.IX Item "share_methods(SERVER, NAMES)"
.PD 0
.IP "share_procedures(\s-1SERVER\s0, \s-1NAMES\s0)" 4
.IX Item "share_procedures(SERVER, NAMES)"
.IP "share_functions(\s-1SERVER\s0, \s-1NAMES\s0)" 4
.IX Item "share_functions(SERVER, NAMES)"
.PD
The calling server object shares the methods/procedures/functions listed in
\&\fB\s-1NAMES\s0\fR with the source-server passed as the first object. The source must
derive from this package in order for this operation to be permitted. At least
one method must be specified, and all are specified by name (not by object
refernce). Both objects will reference the same exact \fBRPC::XML::Procedure\fR
(or derivative thereof) object in this case, meaning that call-statistics and
the like will reflect the combined data. If one or more of the passed names are
not present on the source server, an error message is returned and none are
copied to the calling object.
.Sp
Alternately, one or more of the name parameters passed to this call may be
regular-expression objects (the result of the \fBqr\fR operator). Any of these
detected are applied against the list of all available methods known to the
source server. All matching ones are inserted into the list (the list is pared
for redundancies in any case). This allows for easier addition of whole
classes such as those in the \f(CW\*(C`system.*\*(C'\fR name space (via \f(CW\*(C`qr/^system[.]/\*(C'\fR),
for example. There is no substring matching provided. Names listed in the
parameters to this routine must be either complete strings or regular
expressions.
.Sp
The \fBshare_procedures\fR and \fBshare_functions\fR calls are provided for symmetry.
.IP "copy_methods(\s-1SERVER\s0, \s-1NAMES\s0)" 4
.IX Item "copy_methods(SERVER, NAMES)"
.PD 0
.IP "copy_procedures(\s-1SERVER\s0, \s-1NAMES\s0)" 4
.IX Item "copy_procedures(SERVER, NAMES)"
.IP "copy_functions(\s-1SERVER\s0, \s-1NAMES\s0)" 4
.IX Item "copy_functions(SERVER, NAMES)"
.PD
These behave like the methods \fBshare_*\fR above, with the exception that
the calling object is given a clone of each method, rather than referencing
the same exact method as the source server. The code reference part of the
method is shared between the two, but all other data are copied (including a
fresh copy of any list references used) into a completely new
\&\fBRPC::XML::Procedure\fR (or derivative) object, using the \f(CW\*(C`clone()\*(C'\fR method
from that class. Thus, while the calling object has the same methods
available, and is re-using existing code in the Perl runtime, the method
objects (and hence the statistics and such) are kept separate. As with the
above, an error is flagged if one or more are not found.
.Sp
This routine also accepts regular-expression objects with the same behavior and
limitations. Again, \fBcopy_procedures\fR and \fBcopy_functions\fR are provided for
symmetry.
.SS "Specifying Server-Side Remote Procedures"
.IX Subsection "Specifying Server-Side Remote Procedures"
Specifying the methods themselves can be a tricky undertaking. Some packages
(in other languages) delegate a specific class to handling incoming requests.
This works well, but it can lead to routines not intended for public
availability to in fact be available. There are also issues around the access
that the methods would then have to other resources within the same running
system.
.PP
The approach taken by \fBRPC::XML::Server\fR (and the \fBApache::RPC::Server\fR
subclass of it) require that remote procedures be explicitly published in one
of the several ways provided. Procedures may be added directly within code by
using \fBadd_procedure\fR/\fBadd_method\fR/\fBadd_function\fR as described above, with
full data provided for the code reference, signature list, etc. The
\&\fBadd_*\fR technique can also be used with a file that conforms to a
specific XML-based format (detailed in the manual page for the
\&\fBRPC::XML::Procedure\fR class, see RPC::XML::Procedure).
Entire directories of files may be added using \fBadd_methods_in_dir\fR, which
merely reads the given directory for files that appear to be method
definitions.
.SS "The Three Types of Procedures"
.IX Subsection "The Three Types of Procedures"
There are three types of procedures that \fBRPC::XML::Server\fR marshalls calls
to. All are provided by the \fBRPC::XML::Procedure\fR module. You should not
need to load or reference this module directly, as loading \fBRPC::XML::Server\fR
(or a derivative) makes it available. The three types are:
.IP "Methods (\fBRPC::XML::Method\fR)" 4
.IX Item "Methods (RPC::XML::Method)"
Code that is considered a \*(L"method\*(R" by the server is called as though it were,
in fact, a method in that class. The first argument in the list is the server
object itself, with the arguments to the call making up the rest of the list.
The server checks the signature of the method against the arguments list
before the call is made. See below (\*(L"How Procedures Are Called\*(R") for more
on the invocation of code as methods.
.IP "Procedures (\fBRPC::XML::Procedure\fR)" 4
.IX Item "Procedures (RPC::XML::Procedure)"
Code that is considered a \*(L"procedure\*(R" by the server is called like a normal
(non-method) subroutine call. The server object is not injected into the
arguments list. The signature of the procedure is checked again the list of
arguments before the call is made, as with methods.
.IP "Functions (\fBRPC::XML::Function\fR)" 4
.IX Item "Functions (RPC::XML::Function)"
Lastly, code that is considered a \*(L"function\*(R" is the simplest of the three:
it does not have the server object injected into the arguments list, and no
check of signatures is done before the call is made. It is the responsibility
of the function to properly understand the arguments list, and to return a
value that the caller will understand.
.PP
There is (currently) no version that is called like a method but ignores
signatures like a function.
.SS "How Procedures Are Called"
.IX Subsection "How Procedures Are Called"
When a routine is called via the server dispatcher, it is called with the
arguments that the client request passed. Depending on whether the routine is
considered a \*(L"function\*(R", a \*(L"procedure\*(R" or a \*(L"method\*(R", there may be an extra
argument at the head of the list. The extra argument is present when the
routine being dispatched is part of a \fBRPC::XML::Method\fR object. The extra
argument is a reference to a \fBRPC::XML::Server\fR object (or a subclass
thereof). This is derived from a hash reference, and will include these special
keys:
.IP "method_name" 4
.IX Item "method_name"
This is the name by which the method was called in the client. Most of the
time, this will probably be consistent for all calls to the server-side
method. But it does not have to be, hence the passing of the value.
.IP "signature" 4
.IX Item "signature"
This is the signature that was used, when dispatching. Perl has a liberal
view of lists and scalars, so it is not always clear what arguments the client
specifically has in mind when calling the method. The signature is an array
reference containing one or more datatypes, each a simple string. The first
of the datatypes specifies the expected return type. The remainder (if any)
refer to the arguments themselves.
.IP "peeraddr" 4
.IX Item "peeraddr"
This is the address part of a packed \fB\s-1SOCKADDR_IN\s0\fR structure, as returned by
\&\*(L"pack_sockaddr_in\*(R" in Socket, which contains the address of the client that has
connected and made the current request. This is provided \*(L"raw\*(R" in case you
need it. While you could re-create it from \f(CW\*(C`peerhost\*(C'\fR, it is readily
available in both this server environment and the \fBApache::RPC::Server\fR
environment and thus included for convenience.
.IP "peerhost" 4
.IX Item "peerhost"
This is the address of the remote (client) end of the socket, in \f(CW\*(C`x.x.x.x\*(C'\fR
(dotted-quad) format. If you wish to look up the clients host-name, you
can use this to do so or utilize the encoded structure above directly.
.IP "peerport" 4
.IX Item "peerport"
This is the port of the remote (client) end of the socket, taken from the
\&\fB\s-1SOCKADDR_IN\s0\fR structure.
.IP "request" 4
.IX Item "request"
The HTTP::Request object for this request. Can be used to read
\&\s-1HTTP\s0 headers sent by the client (\f(CW\*(C`X\-Forwarded\-For\*(C'\fR for your access checks, for
example).
.PP
Those keys should only be referenced within method code itself, as they are
not set on the server object outside of that context.
.PP
Note that by passing the server object reference first, method-classed
routines are essentially expected to behave as actual methods of the server
class, as opposed to ordinary functions. Of course, they can also discard the
initial argument completely.
.PP
The routines should not make (excessive) use of global variables, for obvious
reasons. When the routines are loaded from \s-1XPL\s0 files, the code is created as a
closure that forces execution in the \fBRPC::XML::Procedure\fR package (unless the
\&\s-1XPL\s0 specifies a namespace, see RPC::XML::Procedure). If
the code element of a procedure/method is passed in as a direct code reference
by one of the other syntaxes allowed by the constructor, the package may well
be different. Thus, routines should strive to be as localized as possible,
independent of specific namespaces. If a group of routines are expected to work
in close concert, each should explicitly set the namespace with a \f(CW\*(C`package\*(C'\fR
declaration as the first statement within the routines themselves.
.SS "The Default Methods Provided"
.IX Subsection "The Default Methods Provided"
The following methods are provided with this package, and are the ones
installed on newly-created server objects unless told not to. These are
identified by their published names, as they are compiled internally as
anonymous subroutines and thus cannot be called directly:
.IP "\fBsystem.identity\fR" 4
.IX Item "system.identity"
Returns a \fBstring\fR value identifying the server name, version, and possibly a
capability level. Takes no arguments.
.IP "\fBsystem.introspection\fR" 4
.IX Item "system.introspection"
Returns a series of \fBstruct\fR objects that give overview documentation of one
or more of the published methods. It may be called with a \fBstring\fR
identifying a single routine, in which case the return value is a
\&\fBstruct\fR. It may be called with an \fBarray\fR of \fBstring\fR values, in which
case an \fBarray\fR of \fBstruct\fR values, one per element in, is returned. Lastly,
it may be called with no input parameters, in which case all published
routines are documented.  Note that routines may be configured to be hidden
from such introspection queries.
.IP "\fBsystem.listMethods\fR" 4
.IX Item "system.listMethods"
Returns a list of the published methods or a subset of them as an \fBarray\fR of
\&\fBstring\fR values. If called with no parameters, returns all (non-hidden)
method names. If called with a single \fBstring\fR pattern, returns only those
names that contain the string as a substring of their name (case-sensitive,
and this is \fInot\fR a regular expression evaluation).
.IP "\fBsystem.methodHelp\fR" 4
.IX Item "system.methodHelp"
Takes either a single method name as a \fBstring\fR, or a series of them as an
\&\fBarray\fR of \fBstring\fR. The return value is the help text for the method, as
either a \fBstring\fR or \fBarray\fR of \fBstring\fR value. If the method(s) have no
help text, the string will be null.
.IP "\fBsystem.methodSignature\fR" 4
.IX Item "system.methodSignature"
As above, but returns the signatures that the method accepts, as \fBarray\fR of
\&\fBstring\fR representations. If only one method is requests via a \fBstring\fR
parameter, then the return value is the corresponding array. If the parameter
in is an \fBarray\fR, then the returned value will be an \fBarray\fR of \fBarray\fR of
\&\fBstring\fR.
.IP "\fBsystem.multicall\fR" 4
.IX Item "system.multicall"
This is a simple implementation of composite function calls in a single
request. It takes an \fBarray\fR of \fBstruct\fR values. Each \fBstruct\fR has at least
a \f(CW\*(C`methodName\*(C'\fR member, which provides the name of the method to call. If
there is also a \f(CW\*(C`params\*(C'\fR member, it refers to an \fBarray\fR of the parameters
that should be passed to the call.
.IP "\fBsystem.status\fR" 4
.IX Item "system.status"
Takes no arguments and returns a \fBstruct\fR containing a number of system
status values including (but not limited to) the current time on the server,
the time the server was started (both of these are returned in both \s-1ISO\s0 8601
and UNIX-style integer formats), number of requests dispatched, and some
identifying information (hostname, port, etc.).
.PP
In addition, each of these has an accompanying help file in the \f(CW\*(C`methods\*(C'\fR
sub-directory of the distribution.
.PP
These methods are installed as \f(CW\*(C`*.xpl\*(C'\fR files, which are generated from files
in the \f(CW\*(C`methods\*(C'\fR directory of the distribution using the \fBmake_method\fR tool
(see make_method). The files there provide the Perl code that
implements these, their help files and other information.
.SS "Content Compression"
.IX Subsection "Content Compression"
The \fBRPC::XML::Server\fR class now supports compressed messages, both incoming
and outgoing. If a client indicates that it can understand compressed content,
the server will use the \fBCompress::Zlib\fR (available from \s-1CPAN\s0) module, if
available, to compress any outgoing messages above a certain threshhold in
size (the default threshhold is set to 4096 bytes). The following methods are
all related to the compression support within the server class:
.IP "compress" 4
.IX Item "compress"
Returns a false value if compression is not available to the server object.
This is based on the availability of the \fBCompress::Zlib\fR module at start-up
time, and cannot be changed.
.IP "compress_thresh([\s-1MIN_LIMIT\s0])" 4
.IX Item "compress_thresh([MIN_LIMIT])"
Return or set the compression threshhold value. Messages smaller than this
size in bytes will not be compressed, even when compression is available, to
save on \s-1CPU\s0 resources. If a value is passed, it becomes the new limit and the
old value is returned.
.SS "Spooling Large Messages"
.IX Subsection "Spooling Large Messages"
If the server anticipates handling large out-bound messages (for example, if
the hosted code returns large Base64 values pre-encoded from file handles),
the \f(CW\*(C`message_file_thresh\*(C'\fR and \f(CW\*(C`message_temp_dir\*(C'\fR settings may be used in a
manner similar to \fBRPC::XML::Client\fR. Specifically, the threshhold is used to
determine when a message should be spooled to a filehandle rather than made
into an in-memory string (the \fBRPC::XML::base64\fR type can use a filehandle,
thus eliminating the need for the data to ever be completely in memory). An
anonymous temporary file is used for these operations.
.PP
Note that the message size is checked before compression is applied, since the
size of the compressed output cannot be known until the full message is
examined. It is possible that a message will be spooled even if its compressed
size is below the threshhold, if the uncompressed size exceeds the threshhold.
.IP "message_file_thresh" 4
.IX Item "message_file_thresh"
.PD 0
.IP "message_temp_dir" 4
.IX Item "message_temp_dir"
.PD
These methods may be used to retrieve or alter the values of the given keys
as defined earlier for the \f(CW\*(C`new\*(C'\fR method.
.SS "Server Faults"
.IX Subsection "Server Faults"
Previous versions of this library had a very loosely-organized set of fault
codes that a server might return in certain (non-fatal) error circumstances.
This has been replaced by a more configurable, adjustable system to allow
users to better integrate the server-defined faults with any that their
application may produce. It also allows for the definition of additional
fault types so that the same mechanism for formatting the pre-defined faults
can be used within sub-classes and user applications.
.PP
The server method \fBserver_fault\fR is used to generate \fBRPC::XML::fault\fR
objects for these situations. It takes one or two arguments, the first being
the name of the type of fault to create and the second being the specific
message. If a fault is defined with a static message, the second argument may
be skipped (and will be ignored if passed).
.PP
In addition to defining their own faults, a user may override the definition
of any of the server's pre-defined faults.
.PP
\fIDefining faults\fR
.IX Subsection "Defining faults"
.PP
The user may define their own faults using the \f(CW\*(C`fault_table\*(C'\fR argument to the
constructor of the server class being instantiated. They may also override
any of the pre-defined faults (detailed in the next section) by providing a
new definition for the name.
.PP
The value of the \f(CW\*(C`fault_table\*(C'\fR argument is a hash reference whose keys are
the names of the faults and whose values are one of two types:
.IP "An integer" 4
.IX Item "An integer"
If the value for the key is a scalar, it is assumed to be an integer and will
be used as the fault code. When the fault is created, the message argument
(the second parameter) will be used verbatim as the fault message.
.IP "A 2\-element list reference" 4
.IX Item "A 2-element list reference"
If the value is a list reference, it is assumed to have two elements: the first
is the integer fault code to use, and the second is a message \*(L"template\*(R"
string to use as the fault message. If the string contains the sequence \f(CW%s\fR,
this will be replaced with the message argument (the second parameter) passed
to \fBserver_fault\fR. If that sequence is not in the string, then the fault
message is considered static and the message argument is ignored.
.PP
An example of defining faults:
.PP
.Vb 9
\&    my $server = RPC::XML::Server\->new(
\&        ...
\&        fault_table => {
\&            limitexceeded => [ 500 => \*(AqCall limit exceeded\*(Aq ],
\&            accessdenied  => [ 600 => \*(AqAccess denied: %s\*(Aq ],
\&            serviceclosed => 700
\&        },
\&        ...
\&    );
.Ve
.PP
In this example, the fault-type \*(L"limitexceeded\*(R" is defined as having a fault
code of 500 and a static message of \f(CW\*(C`Call limit exceeded\*(C'\fR. The next fault
defined is \*(L"accessdenied\*(R", which has a code of 600 and message that starts
with \f(CW\*(C`Access denied:\*(C'\fR and incorporates whatever message was passed in to the
fault creation. The last example defines a fault called \f(CW\*(C`serviceclosed\*(C'\fR that
has a code of 700 and uses any passed-in message unaltered.
.PP
\fIServer-defined faults\fR
.IX Subsection "Server-defined faults"
.PP
The \fBRPC::XML::Server\fR class defines the following faults and uses them
internally. You can override the codes and messages for these by including them
in the table passed as a \f(CW\*(C`fault_table\*(C'\fR argument. The faults fall into three
groups:
.IP "Request Initialization" 4
.IX Item "Request Initialization"
Faults in this group stem from the initialization of the request and the
parsing of the \s-1XML\s0. The codes for this group fall in the range 100\-199.
.IP "Method Resolution" 4
.IX Item "Method Resolution"
This group covers problems with mapping the request to a known method or
function on the server. These codes will be in the range 200\-299.
.IP "Execution" 4
.IX Item "Execution"
Lastly, these faults are for problems in actually executing the requested
code. Their codes are in the range 300\-399.
.PP
The faults, and the phases they apply to, are:
.IP "badxml (Request Initialization)" 4
.IX Item "badxml (Request Initialization)"
This fault is sent back to the client when the \s-1XML\s0 of the request did not
parse as a valid XML-RPC request.
.Sp
The code is \f(CW100\fR, and the message is of the form, \f(CW\*(C`XML parse error: %s\*(C'\fR.
The specific error from the \s-1XML\s0 parser is included in the message.
.IP "badmethod (Method Resolution)" 4
.IX Item "badmethod (Method Resolution)"
This fault is sent when the requested method is unknown to the server. No
method has been configured on the server by that name.
.Sp
The code is \f(CW200\fR, and the message is of the form, \f(CW\*(C`Method lookup error: %s\*(C'\fR.
The name of the method and other information is included in the message.
.IP "badsignature (Method Resolution)" 4
.IX Item "badsignature (Method Resolution)"
If a method is known on the server, but there is no signature that matches the
sequence of arguments passed, this fault is returned. This fault cannot be
triggered by server-side code configured via \fBRPC::XML::Function\fR, as no
signature-checking is done for those.
.Sp
The code is \f(CW201\fR, and the message is of the form, \f(CW\*(C`Method signature error:
%s\*(C'\fR. The name of the method and the signature of the arguments is included in
the message.
.IP "execerror (Execution)" 4
.IX Item "execerror (Execution)"
This fault relates back to the client any exception thrown by the remote code
during execution. If the invoked code returned their error in the form of a
\&\fBRPC::XML::fault\fR object, that fault is returned instead. Otherwise, the
value of \f(CW$@\fR is used in the message of the fault that gets generated.
.Sp
The code is \f(CW300\fR, and the message is of the form, \f(CW\*(C`Code execution error:
%s\*(C'\fR. The actual text of the exception thrown is included in the message.
.PP
There is one special server-fault whose code and message cannot be overridden.
If a call is made to \fBserver_fault\fR for an unknown type of fault, the
returned object will have a code of \f(CW\*(C`\-1\*(C'\fR and a message stating that the
fault-type is unknown. The message will include both the requested type-name
and any message (if any) that was passed in.
.PP
\fIAdjusting the server-defined codes\fR
.IX Subsection "Adjusting the server-defined codes"
.PP
If you just want to \*(L"move\*(R" the range of codes that the server uses out of the
way of your application's own faults, this can be done with the
\&\f(CW\*(C`fault_code_base\*(C'\fR parameter when constructing the server object. The value
of the parameter must be an integer, and it is added to the value of all
existing fault codes. For example, a value of \f(CW10000\fR would make the code
for the \f(CW\*(C`badxml\*(C'\fR fault be \f(CW10100\fR, the code for \f(CW\*(C`badmethod\*(C'\fR be \f(CW10200\fR,
etc.
.PP
This is applied before any user-defined faults are merged in, so their code
values will not be affected by this value.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Unless explicitly stated otherwise, all methods return some type of reference
on success, or an error string on failure. Non-reference return values should
always be interpreted as errors unless otherwise noted.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-rpc\-xml at rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=RPC\-XML <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=RPC-XML>. I will be
notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=RPC\-XML <http://rt.cpan.org/NoAuth/Bugs.html?Dist=RPC-XML>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/RPC\-XML <http://annocpan.org/dist/RPC-XML>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/RPC\-XML <http://cpanratings.perl.org/d/RPC-XML>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/RPC\-XML <http://search.cpan.org/dist/RPC-XML>
.IP "\(bu" 4
MetaCPAN
.Sp
https://metacpan.org/release/RPC\-XML <https://metacpan.org/release/RPC-XML>
.IP "\(bu" 4
Source code on GitHub
.Sp
http://github.com/rjray/rpc\-xml <http://github.com/rjray/rpc-xml>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This file and the code within are copyright (c) 2011 by Randy J. Ray.
.PP
Copying and distribution are permitted under the terms of the Artistic
License 2.0 (http://www.opensource.org/licenses/artistic\-license\-2.0.php <http://www.opensource.org/licenses/artistic-license-2.0.php>) or
the \s-1GNU\s0 \s-1LGPL\s0 2.1 (http://www.opensource.org/licenses/lgpl\-2.1.php <http://www.opensource.org/licenses/lgpl-2.1.php>).
.SH "CREDITS"
.IX Header "CREDITS"
The \fBXML-RPC\fR standard is Copyright (c) 1998\-2001, UserLand Software, Inc.
See <http://www.xmlrpc.com> for more information about the \fBXML-RPC\fR
specification.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1RPC::XML\s0, RPC::XML::Client,
RPC::XML::ParserFactory
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy J. Ray \f(CW\*(C`<rjray@blackperl.com>\*(C'\fR
