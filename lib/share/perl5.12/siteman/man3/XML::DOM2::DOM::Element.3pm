.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM2::DOM::Element 3"
.TH XML::DOM2::DOM::Element 3 "2007-11-28" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM2::DOM::Element \- A library of DOM (Document Object Model) methods for XML Elements.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides all the \s-1DOM\s0 method for \s-1XML\s0 Elements
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$element\->\fIgetFirstChild()\fP"
.el .SS "\f(CW$element\fP\->\fIgetFirstChild()\fP"
.IX Subsection "$element->getFirstChild()"
.ie n .SS "$element\->\fIfirstChild()\fP"
.el .SS "\f(CW$element\fP\->\fIfirstChild()\fP"
.IX Subsection "$element->firstChild()"
.Vb 1
\&  Returns the elements first child in it\*(Aqs children list
.Ve
.ie n .SS "$element\->\fIgetLastChild()\fP"
.el .SS "\f(CW$element\fP\->\fIgetLastChild()\fP"
.IX Subsection "$element->getLastChild()"
.ie n .SS "$element\->\fIlastChild()\fP"
.el .SS "\f(CW$element\fP\->\fIlastChild()\fP"
.IX Subsection "$element->lastChild()"
.Vb 1
\&  Returns the elements last child in it\*(Aqs children list
.Ve
.ie n .SS "$element\->getChildIndex( @children )"
.el .SS "\f(CW$element\fP\->getChildIndex( \f(CW@children\fP )"
.IX Subsection "$element->getChildIndex( @children )"
.Vb 1
\&  Return the array index of this element in the parent or the passed list (if there is one).
.Ve
.ie n .SS "$element\->getChildAtIndex( $index )"
.el .SS "\f(CW$element\fP\->getChildAtIndex( \f(CW$index\fP )"
.IX Subsection "$element->getChildAtIndex( $index )"
.Vb 1
\&  Return the element at the specified index (the index can be negative).
.Ve
.ie n .SS "$element\->\fIgetNextSibling()\fP"
.el .SS "\f(CW$element\fP\->\fIgetNextSibling()\fP"
.IX Subsection "$element->getNextSibling()"
.ie n .SS "$element\->\fInextSibling()\fP"
.el .SS "\f(CW$element\fP\->\fInextSibling()\fP"
.IX Subsection "$element->nextSibling()"
.Vb 1
\&  Return the next element to this element in the parents child list.
.Ve
.ie n .SS "$element\->\fIgetPreviousSibling()\fP"
.el .SS "\f(CW$element\fP\->\fIgetPreviousSibling()\fP"
.IX Subsection "$element->getPreviousSibling()"
.ie n .SS "$element\->\fIpreviousSibling()\fP"
.el .SS "\f(CW$element\fP\->\fIpreviousSibling()\fP"
.IX Subsection "$element->previousSibling()"
.Vb 1
\&  Return the previous element to this element in the parents child list.
.Ve
.ie n .SS "$element\->\fIgetChildren()\fP"
.el .SS "\f(CW$element\fP\->\fIgetChildren()\fP"
.IX Subsection "$element->getChildren()"
.ie n .SS "$element\->\fIgetChildElements()\fP"
.el .SS "\f(CW$element\fP\->\fIgetChildElements()\fP"
.IX Subsection "$element->getChildElements()"
.ie n .SS "$element\->\fIgetChildNodes()\fP"
.el .SS "\f(CW$element\fP\->\fIgetChildNodes()\fP"
.IX Subsection "$element->getChildNodes()"
.Vb 1
\&  Returns all the elements children.
.Ve
.ie n .SS "$element\->getChildrenByName( $name )"
.el .SS "\f(CW$element\fP\->getChildrenByName( \f(CW$name\fP )"
.IX Subsection "$element->getChildrenByName( $name )"
.Vb 1
\&  Returns all the elements children with that tag name (including namespace prefix).
.Ve
.ie n .SS "$element\->\fIhasChildren()\fP"
.el .SS "\f(CW$element\fP\->\fIhasChildren()\fP"
.IX Subsection "$element->hasChildren()"
.ie n .SS "$element\->\fIhasChildElements()\fP"
.el .SS "\f(CW$element\fP\->\fIhasChildElements()\fP"
.IX Subsection "$element->hasChildElements()"
.ie n .SS "$element\->\fIhasChildNodes()\fP"
.el .SS "\f(CW$element\fP\->\fIhasChildNodes()\fP"
.IX Subsection "$element->hasChildNodes()"
.Vb 1
\&  Returns 1 if this element has children.
.Ve
.ie n .SS "$element\->\fIgetParent()\fP"
.el .SS "\f(CW$element\fP\->\fIgetParent()\fP"
.IX Subsection "$element->getParent()"
.ie n .SS "$element\->\fIgetParentElement()\fP"
.el .SS "\f(CW$element\fP\->\fIgetParentElement()\fP"
.IX Subsection "$element->getParentElement()"
.ie n .SS "$element\->\fIgetParentNode()\fP"
.el .SS "\f(CW$element\fP\->\fIgetParentNode()\fP"
.IX Subsection "$element->getParentNode()"
.Vb 1
\&  Returns the object of the parent element.
.Ve
.ie n .SS "$element\->setParent( $element )"
.el .SS "\f(CW$element\fP\->setParent( \f(CW$element\fP )"
.IX Subsection "$element->setParent( $element )"
.ie n .SS "$element\->setParentElement( $element )"
.el .SS "\f(CW$element\fP\->setParentElement( \f(CW$element\fP )"
.IX Subsection "$element->setParentElement( $element )"
\&\f(CW$element\fR\->setParent($parent);
.PP
Sets the parent node, used internaly.
.ie n .SS "$element\->\fIgetParents()\fP"
.el .SS "\f(CW$element\fP\->\fIgetParents()\fP"
.IX Subsection "$element->getParents()"
.ie n .SS "$element\->\fIgetParentElements()\fP"
.el .SS "\f(CW$element\fP\->\fIgetParentElements()\fP"
.IX Subsection "$element->getParentElements()"
.ie n .SS "$element\->\fIgetParentNodes()\fP"
.el .SS "\f(CW$element\fP\->\fIgetParentNodes()\fP"
.IX Subsection "$element->getParentNodes()"
.ie n .SS "$element\->\fIgetAncestors()\fP"
.el .SS "\f(CW$element\fP\->\fIgetAncestors()\fP"
.IX Subsection "$element->getAncestors()"
.Vb 2
\&  Return a list of the parents of the current element, starting from the immediate parent. The
\&  last member of the list should be the document element.
.Ve
.ie n .SS "$element\->isAncestor( $node )"
.el .SS "\f(CW$element\fP\->isAncestor( \f(CW$node\fP )"
.IX Subsection "$element->isAncestor( $node )"
.Vb 1
\&  Returns true if the current element is an ancestor of the descendant element.
.Ve
.ie n .SS "$element\->isDescendant( $node )"
.el .SS "\f(CW$element\fP\->isDescendant( \f(CW$node\fP )"
.IX Subsection "$element->isDescendant( $node )"
.Vb 1
\&  Return true if the crrent element is the descendant of the ancestor element.
.Ve
.ie n .SS "$element\->\fIgetSiblings()\fP"
.el .SS "\f(CW$element\fP\->\fIgetSiblings()\fP"
.IX Subsection "$element->getSiblings()"
.Vb 1
\&  Returns a list of sibling elements.
.Ve
.ie n .SS "$element\->\fIhasSiblings()\fP"
.el .SS "\f(CW$element\fP\->\fIhasSiblings()\fP"
.IX Subsection "$element->hasSiblings()"
.Vb 1
\&  Returns true if the elements has sibling elements.
.Ve
.ie n .SS "$element\->\fIgetElementName()\fP"
.el .SS "\f(CW$element\fP\->\fIgetElementName()\fP"
.IX Subsection "$element->getElementName()"
.ie n .SS "$element\->\fIgetElementType()\fP"
.el .SS "\f(CW$element\fP\->\fIgetElementType()\fP"
.IX Subsection "$element->getElementType()"
.ie n .SS "$element\->\fIgetType()\fP"
.el .SS "\f(CW$element\fP\->\fIgetType()\fP"
.IX Subsection "$element->getType()"
.ie n .SS "$element\->\fIgetTagName()\fP"
.el .SS "\f(CW$element\fP\->\fIgetTagName()\fP"
.IX Subsection "$element->getTagName()"
.ie n .SS "$element\->\fIgetTagType()\fP"
.el .SS "\f(CW$element\fP\->\fIgetTagType()\fP"
.IX Subsection "$element->getTagType()"
.ie n .SS "$element\->\fIgetNodeName()\fP"
.el .SS "\f(CW$element\fP\->\fIgetNodeName()\fP"
.IX Subsection "$element->getNodeName()"
.ie n .SS "$element\->\fIgetNodeType()\fP"
.el .SS "\f(CW$element\fP\->\fIgetNodeType()\fP"
.IX Subsection "$element->getNodeType()"
.Vb 1
\&  Return a string containing the name (i.e. the type, not the Id) of an element.
.Ve
.ie n .SS "$element\->\fIgetElementId()\fP"
.el .SS "\f(CW$element\fP\->\fIgetElementId()\fP"
.IX Subsection "$element->getElementId()"
.Vb 1
\&  Return a string containing the elements Id (unique identifier string).
.Ve
.ie n .SS "$element\->getAttribute( $attributeName )"
.el .SS "\f(CW$element\fP\->getAttribute( \f(CW$attributeName\fP )"
.IX Subsection "$element->getAttribute( $attributeName )"
.Vb 2
\&  Returns the specified attribute in the element, will return a
\&  serialised string instead of posible attribute object if serialise set.
.Ve
.ie n .SS "$element\->getAttributes( $serialise, $ns )"
.el .SS "\f(CW$element\fP\->getAttributes( \f(CW$serialise\fP, \f(CW$ns\fP )"
.IX Subsection "$element->getAttributes( $serialise, $ns )"
.Vb 1
\&  Returns a list of attributes in various forms.
.Ve
.ie n .SS "$element\->\fIgetAttributeNames()\fP"
.el .SS "\f(CW$element\fP\->\fIgetAttributeNames()\fP"
.IX Subsection "$element->getAttributeNames()"
.Vb 1
\&  Returns a list of attribute names, used internaly.
.Ve
.ie n .SS "$element\->getAttributeNamesNS( $namespace )"
.el .SS "\f(CW$element\fP\->getAttributeNamesNS( \f(CW$namespace\fP )"
.IX Subsection "$element->getAttributeNamesNS( $namespace )"
.Vb 1
\&  Returns a list of attribute names, used internaly.
.Ve
.ie n .SS "$element\->\fIgetAttributeNamespaces()\fP"
.el .SS "\f(CW$element\fP\->\fIgetAttributeNamespaces()\fP"
.IX Subsection "$element->getAttributeNamespaces()"
.Vb 1
\&  Returns a list of attribute names, used internaly.
.Ve
.ie n .SS "$element\->hasAttribute( $attributeName )"
.el .SS "\f(CW$element\fP\->hasAttribute( \f(CW$attributeName\fP )"
.IX Subsection "$element->hasAttribute( $attributeName )"
.Vb 1
\&  Returns true if this element as this attribute.
.Ve
.ie n .SS "$element\->hasAttributeNS( $namespace, $attributeName )"
.el .SS "\f(CW$element\fP\->hasAttributeNS( \f(CW$namespace\fP, \f(CW$attributeName\fP )"
.IX Subsection "$element->hasAttributeNS( $namespace, $attributeName )"
.Vb 1
\&  Returns true if this attribute in this namespace is in this element.
.Ve
.ie n .SS "$element\->\fIhasAttributes()\fP"
.el .SS "\f(CW$element\fP\->\fIhasAttributes()\fP"
.IX Subsection "$element->hasAttributes()"
.Vb 1
\&  Return true is element has any attributes
.Ve
.ie n .SS "$element\->setAttribute( $attribute, $value )"
.el .SS "\f(CW$element\fP\->setAttribute( \f(CW$attribute\fP, \f(CW$value\fP )"
.IX Subsection "$element->setAttribute( $attribute, $value )"
.Vb 1
\&  Set an attribute on this element, it will accept serialised strings or objects.
.Ve
.ie n .SS "$element\->removeAttribute( $name )"
.el .SS "\f(CW$element\fP\->removeAttribute( \f(CW$name\fP )"
.IX Subsection "$element->removeAttribute( $name )"
.Vb 1
\&  Remove a single attribute from this element.
.Ve
.ie n .SS "$element\->removeAttributeNS( $namespace, $name )"
.el .SS "\f(CW$element\fP\->removeAttributeNS( \f(CW$namespace\fP, \f(CW$name\fP )"
.IX Subsection "$element->removeAttributeNS( $namespace, $name )"
.Vb 1
\&  Remove a single attribute from this element.
.Ve
.ie n .SS "$element\->getAttributeNS( $namespace, $name )"
.el .SS "\f(CW$element\fP\->getAttributeNS( \f(CW$namespace\fP, \f(CW$name\fP )"
.IX Subsection "$element->getAttributeNS( $namespace, $name )"
.Vb 1
\&  Returns an attributes namespace in this element.
.Ve
.ie n .SS "$element\->setAttributeNS( $namespace, $name, $value )"
.el .SS "\f(CW$element\fP\->setAttributeNS( \f(CW$namespace\fP, \f(CW$name\fP, \f(CW$value\fP )"
.IX Subsection "$element->setAttributeNS( $namespace, $name, $value )"
.Vb 1
\&  Sets an attributes namespace in this element.
.Ve
.ie n .SS "$element\->cdata( $text )"
.el .SS "\f(CW$element\fP\->cdata( \f(CW$text\fP )"
.IX Subsection "$element->cdata( $text )"
.Vb 1
\&  Rerieve and set this elements cdata (non tag cdata form)
.Ve
.ie n .SS "$element\->\fIhasCDATA()\fP"
.el .SS "\f(CW$element\fP\->\fIhasCDATA()\fP"
.IX Subsection "$element->hasCDATA()"
.Vb 1
\&  Return true if this element has cdata.
.Ve
.ie n .SS "$element\->\fIdocument()\fP"
.el .SS "\f(CW$element\fP\->\fIdocument()\fP"
.IX Subsection "$element->document()"
.Vb 1
\&  Return this elements document, returns undef if no document available.
.Ve
.ie n .SS "$element\->insertBefore( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertBefore( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertBefore( $node, $childNode )"
.ie n .SS "$element\->insertChildBefore( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertChildBefore( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertChildBefore( $node, $childNode )"
.ie n .SS "$element\->insertNodeBefore( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertNodeBefore( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertNodeBefore( $node, $childNode )"
.ie n .SS "$element\->insertElementBefore( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertElementBefore( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertElementBefore( $node, $childNode )"
.Vb 1
\&  Inserts a new element just before the referenced child.
.Ve
.ie n .SS "$element\->insertAfter( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertAfter( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertAfter( $node, $childNode )"
.ie n .SS "$element\->insertChildAfter( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertChildAfter( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertChildAfter( $node, $childNode )"
.ie n .SS "$element\->insertElementAfter( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertElementAfter( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertElementAfter( $node, $childNode )"
.ie n .SS "$element\->insertNodeAfter( $node, $childNode )"
.el .SS "\f(CW$element\fP\->insertNodeAfter( \f(CW$node\fP, \f(CW$childNode\fP )"
.IX Subsection "$element->insertNodeAfter( $node, $childNode )"
Inserts a new child element just after the referenced child.
.ie n .SS "$element\->insertSiblingAfter( $node )"
.el .SS "\f(CW$element\fP\->insertSiblingAfter( \f(CW$node\fP )"
.IX Subsection "$element->insertSiblingAfter( $node )"
.Vb 1
\&  Inserts the child just after the current element (effects parent).
.Ve
.ie n .SS "$element\->insertSiblingBefore( $node )"
.el .SS "\f(CW$element\fP\->insertSiblingBefore( \f(CW$node\fP )"
.IX Subsection "$element->insertSiblingBefore( $node )"
.Vb 1
\&  Inserts the child just before the current element (effects parent).
.Ve
.ie n .SS "$element\->replaceChild( $newChild, $oldChild )"
.el .SS "\f(CW$element\fP\->replaceChild( \f(CW$newChild\fP, \f(CW$oldChild\fP )"
.IX Subsection "$element->replaceChild( $newChild, $oldChild )"
.Vb 1
\&  Replace an old child with a new element, returns old element.
.Ve
.ie n .SS "$element\->replaceElement( $newElement )"
.el .SS "\f(CW$element\fP\->replaceElement( \f(CW$newElement\fP )"
.IX Subsection "$element->replaceElement( $newElement )"
.ie n .SS "$element\->replaceNode( $newElement )"
.el .SS "\f(CW$element\fP\->replaceNode( \f(CW$newElement\fP )"
.IX Subsection "$element->replaceNode( $newElement )"
.Vb 1
\&  Replace an old element with a new element in the parents context; element becomes orphaned.
.Ve
.ie n .SS "$element\->removeChild( $child )"
.el .SS "\f(CW$element\fP\->removeChild( \f(CW$child\fP )"
.IX Subsection "$element->removeChild( $child )"
.Vb 1
\&  Remove a child from this element, returns the orphaned element.
.Ve
.ie n .SS "$element\->\fIremoveElement()\fP"
.el .SS "\f(CW$element\fP\->\fIremoveElement()\fP"
.IX Subsection "$element->removeElement()"
.ie n .SS "$element\->\fIremoveNode()\fP"
.el .SS "\f(CW$element\fP\->\fIremoveNode()\fP"
.IX Subsection "$element->removeNode()"
.Vb 1
\&  Removes this element from it\*(Aqs parent; element becomes orphaned.
.Ve
.ie n .SS "$element\->appendChild( $node )"
.el .SS "\f(CW$element\fP\->appendChild( \f(CW$node\fP )"
.IX Subsection "$element->appendChild( $node )"
.ie n .SS "$element\->appendElement( $node )"
.el .SS "\f(CW$element\fP\->appendElement( \f(CW$node\fP )"
.IX Subsection "$element->appendElement( $node )"
.ie n .SS "$element\->appendNode( $node )"
.el .SS "\f(CW$element\fP\->appendNode( \f(CW$node\fP )"
.IX Subsection "$element->appendNode( $node )"
.Vb 1
\&  Adds the new child to the end of this elements children list.
.Ve
.ie n .SS "$element\->cloneNode( $deep )"
.el .SS "\f(CW$element\fP\->cloneNode( \f(CW$deep\fP )"
.IX Subsection "$element->cloneNode( $deep )"
.ie n .SS "$element\->cloneElement( $deep )"
.el .SS "\f(CW$element\fP\->cloneElement( \f(CW$deep\fP )"
.IX Subsection "$element->cloneElement( $deep )"
.Vb 2
\&  Clones the current element, deep allows all child elements to be cloned.
\&  The new element is an orphan with all the same id\*(Aqs and atributes as this element.
.Ve
.ie n .SS "$element\->findChildIndex( $child )"
.el .SS "\f(CW$element\fP\->findChildIndex( \f(CW$child\fP )"
.IX Subsection "$element->findChildIndex( $child )"
.Vb 1
\&  Scans through children trying to find this child in the list.
.Ve
.ie n .SS "$element\->insertAtIndex( $node, $index )"
.el .SS "\f(CW$element\fP\->insertAtIndex( \f(CW$node\fP, \f(CW$index\fP )"
.IX Subsection "$element->insertAtIndex( $node, $index )"
.Vb 1
\&  Adds the new child at the specified index to this element.
.Ve
.ie n .SS "$element\->removeChildAtIndex( $index )"
.el .SS "\f(CW$element\fP\->removeChildAtIndex( \f(CW$index\fP )"
.IX Subsection "$element->removeChildAtIndex( $index )"
.Vb 1
\&  Removed the child at index and returns the now orphaned element.
.Ve
.ie n .SS "$element\->createChildElement( $name, %options )"
.el .SS "\f(CW$element\fP\->createChildElement( \f(CW$name\fP, \f(CW%options\fP )"
.IX Subsection "$element->createChildElement( $name, %options )"
.ie n .SS "$element\->createElement( $name, %options )"
.el .SS "\f(CW$element\fP\->createElement( \f(CW$name\fP, \f(CW%options\fP )"
.IX Subsection "$element->createElement( $name, %options )"
Not \s-1DOM2\s0, creates a child element, appending to current element.
.PP
The advantage to using this method is the elements created
with \f(CW$document\fR\->createElement create basic element objects or
base objects (those specified in the \s-1XML\s0 base class or it's kin)
Elements created with this could offer more complex objects back.
.PP
Example: an \s-1SVG\s0 Gradiant will have stop elements under it, creating
stop elements with \f(CW$document\fR\->createElement will return an XML::DOM2::Element
create a stop element with \f(CW$element\fR\->createChildElement and it will
return an SVG2::Element::Gradiant::Stop object (although both would
output the same xml) and it would also prevent you from creating invalid
child elements such as a group within a text element.
.PP
\&\f(CW$element\fR\->createChildElement($name, \f(CW%opts\fR);
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Owens, doctormo@postmaster.co.uk
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \s-1XML::DOM2\s0, XML::DOM2::Element
.PP
http://www.w3.org/TR/1998/REC\-DOM\-Level\-1\-19981001/level\-one\-core.html <http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html> \s-1DOM\s0 at the W3C
