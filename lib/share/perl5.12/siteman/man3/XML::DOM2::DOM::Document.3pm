.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::DOM2::DOM::Document 3"
.TH XML::DOM2::DOM::Document 3 "2007-11-21" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  XML::DOM2::DOM::Document
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  Base class for document objects, extends the DOM with document specific methods.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$class\->createDocumentType( $qualifiedName, $publicId, $systemId, $dtd )"
.el .SS "\f(CW$class\fP\->createDocumentType( \f(CW$qualifiedName\fP, \f(CW$publicId\fP, \f(CW$systemId\fP, \f(CW$dtd\fP )"
.IX Subsection "$class->createDocumentType( $qualifiedName, $publicId, $systemId, $dtd )"
.Vb 1
\&  Create a new XML Document Type.
.Ve
.ie n .SS "$class\->createDocument( $namespaceURI, $qualifiedName, $doctype )"
.el .SS "\f(CW$class\fP\->createDocument( \f(CW$namespaceURI\fP, \f(CW$qualifiedName\fP, \f(CW$doctype\fP )"
.IX Subsection "$class->createDocument( $namespaceURI, $qualifiedName, $doctype )"
.Vb 1
\&  Creates a new XML Document.
.Ve
.ie n .SS "$document\->\fIdocumentElement()\fP"
.el .SS "\f(CW$document\fP\->\fIdocumentElement()\fP"
.IX Subsection "$document->documentElement()"
.Vb 1
\&  Returns the main document as an element! it\*(Aqs no longer a document object.
.Ve
.ie n .SS "$document\->\fIdocumentType()\fP"
.el .SS "\f(CW$document\fP\->\fIdocumentType()\fP"
.IX Subsection "$document->documentType()"
.Vb 1
\&  Returns a document type object for this document.
.Ve
.ie n .SS "$document\->addId( $id, $element )"
.el .SS "\f(CW$document\fP\->addId( \f(CW$id\fP, \f(CW$element\fP )"
.IX Subsection "$document->addId( $id, $element )"
.Vb 1
\&  Adds an id of an element, used internaly.
.Ve
.ie n .SS "$document\->removeId( $id )"
.el .SS "\f(CW$document\fP\->removeId( \f(CW$id\fP )"
.IX Subsection "$document->removeId( $id )"
.Vb 1
\&  Removes an id of an element, used internaly.
.Ve
.ie n .SS "$document\->getElementById( $id )"
.el .SS "\f(CW$document\fP\->getElementById( \f(CW$id\fP )"
.IX Subsection "$document->getElementById( $id )"
.Vb 1
\&  Returns the element with that id in this document.
.Ve
.ie n .SS "$document\->addElement( $element )"
.el .SS "\f(CW$document\fP\->addElement( \f(CW$element\fP )"
.IX Subsection "$document->addElement( $element )"
.Vb 1
\&  Adds an element to the elements list, used internaly.
.Ve
.ie n .SS "$document\->removeElement( $element )"
.el .SS "\f(CW$document\fP\->removeElement( \f(CW$element\fP )"
.IX Subsection "$document->removeElement( $element )"
.Vb 1
\&  Remove the specified element from the elements list, used internaly.
.Ve
.ie n .SS "$document\->getElements( $type )"
.el .SS "\f(CW$document\fP\->getElements( \f(CW$type\fP )"
.IX Subsection "$document->getElements( $type )"
.ie n .SS "$document\->getElementsByType( $type )"
.el .SS "\f(CW$document\fP\->getElementsByType( \f(CW$type\fP )"
.IX Subsection "$document->getElementsByType( $type )"
.ie n .SS "$document\->getElementsByName( $type )"
.el .SS "\f(CW$document\fP\->getElementsByName( \f(CW$type\fP )"
.IX Subsection "$document->getElementsByName( $type )"
.Vb 1
\&  Get all elements of the specified type/tagName; if none is specified, get all elements in document.
.Ve
.ie n .SS "$document\->\fIgetElementNames()\fP"
.el .SS "\f(CW$document\fP\->\fIgetElementNames()\fP"
.IX Subsection "$document->getElementNames()"
.ie n .SS "$document\->\fIgetElementTypes()\fP"
.el .SS "\f(CW$document\fP\->\fIgetElementTypes()\fP"
.IX Subsection "$document->getElementTypes()"
.Vb 1
\&  Get all the element types in use in the document.
.Ve
.ie n .SS "$document\->addDefinition( $def )"
.el .SS "\f(CW$document\fP\->addDefinition( \f(CW$def\fP )"
.IX Subsection "$document->addDefinition( $def )"
.Vb 1
\&  Add a definition to the document.
.Ve
.ie n .SS "$document\->definitions( )"
.el .SS "\f(CW$document\fP\->definitions( )"
.IX Subsection "$document->definitions( )"
.Vb 1
\&  Return all definitions in document.
.Ve
.ie n .SS "$document\->getNamespace( $uri )"
.el .SS "\f(CW$document\fP\->getNamespace( \f(CW$uri\fP )"
.IX Subsection "$document->getNamespace( $uri )"
.Vb 1
\&  Return a namespace based on the uri or prefix.
.Ve
.ie n .SS "$document\->createNamespace( $prefix, $uri )"
.el .SS "\f(CW$document\fP\->createNamespace( \f(CW$prefix\fP, \f(CW$uri\fP )"
.IX Subsection "$document->createNamespace( $prefix, $uri )"
.Vb 1
\&  Create a new namespace within this document.
.Ve
.ie n .SS "$document\->addNamespace( $namespace )"
.el .SS "\f(CW$document\fP\->addNamespace( \f(CW$namespace\fP )"
.IX Subsection "$document->addNamespace( $namespace )"
.Vb 1
\&  Add namespace to this document.
.Ve
.ie n .SS "$document\->removeNamespace( $namespace )"
.el .SS "\f(CW$document\fP\->removeNamespace( \f(CW$namespace\fP )"
.IX Subsection "$document->removeNamespace( $namespace )"
.Vb 1
\&  Remove a namespace from this document.
.Ve
.ie n .SS "$document\->createElement( $name, %options )"
.el .SS "\f(CW$document\fP\->createElement( \f(CW$name\fP, \f(CW%options\fP )"
.IX Subsection "$document->createElement( $name, %options )"
.Vb 1
\&  Creates a new element of type name.
.Ve
.ie n .SS "$document\->createElementNS( $namespace, $name, %options )"
.el .SS "\f(CW$document\fP\->createElementNS( \f(CW$namespace\fP, \f(CW$name\fP, \f(CW%options\fP )"
.IX Subsection "$document->createElementNS( $namespace, $name, %options )"
.Vb 1
\&  Create an element in a namespace.
.Ve
.ie n .SS "$document\->createTextNode( $data )"
.el .SS "\f(CW$document\fP\->createTextNode( \f(CW$data\fP )"
.IX Subsection "$document->createTextNode( $data )"
.Vb 1
\&  Create a textnode element.
.Ve
.ie n .SS "$document\->createComment( $data )"
.el .SS "\f(CW$document\fP\->createComment( \f(CW$data\fP )"
.IX Subsection "$document->createComment( $data )"
.Vb 1
\&  Create a comment element
.Ve
.ie n .SS "$document\->createCDATASection( $data )"
.el .SS "\f(CW$document\fP\->createCDATASection( \f(CW$data\fP )"
.IX Subsection "$document->createCDATASection( $data )"
.Vb 1
\&  create a CDATA element.
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Martin Owens, doctormo@cpan.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1XML::DOM2\s0
