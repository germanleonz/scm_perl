.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Frontier::Responder 3"
.TH Frontier::Responder 3 "2002-08-02" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Frontier::Responder \- Create XML\-RPC listeners for normal CGI processes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& use Frontier::Responder; 
\& my $res = Frontier::Responder\->new( methods => {
\&                                                 add => sub{ $_[0] + $_[1] },
\&                                                 cat => sub{ $_[0] . $_[1] },
\&                                                },
\&                                    );
\& print $res\->answer;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Use \fIFrontier::Responder\fR whenever you need to create an XML-RPC listener
using a standard \s-1CGI\s0 interface. To be effective, a script using this class
will often have to be put a directory from which a web server is authorized 
to execute \s-1CGI\s0 programs. An XML-RPC listener using this library will be 
implementing the \s-1API\s0 of a particular XML-RPC application. Each remote 
procedure listed in the \s-1API\s0 of the user defined application will correspond
to a hash key that is defined in the \f(CW\*(C`new\*(C'\fR method of a \fIFrontier::Responder\fR
object. This is exactly the way \fIFrontier::Daemon\fR works as well. 
In order to process the request and get the response, the \f(CW\*(C`answer\*(C'\fR method
is needed. Its return value is \s-1XML\s0 ready for printing.
.PP
For those new to XML-RPC, here is a brief description of this protocol. 
XML-RPC is a way to execute functions on a different 
machine. Both the client's request and listeners response are wrapped 
up in \s-1XML\s0 and sent over \s-1HTTP\s0. Because the XML-RPC conversation is in 
\&\s-1XML\s0, the implementation languages of the server (here called a \fIlistener\fR), 
and the client can be different. This can be a powerful and simple way
to have very different platforms work together without acrimony. Implicit 
in the use of XML-RPC is a contract or \s-1API\s0 that an XML-RPC listener 
implements and an XML-RPC client calls. The \s-1API\s0 needs to list not only 
the various procedures that can be called, but also the XML-RPC datatypes
expected for input and output. Remember that although Perl is permissive
about datatyping, other languages are not. Unforuntately, the XML-RPC spec
doesn't say how to document the \s-1API\s0. It is recomended that the author
of a Perl XML-RPC listener should at least use \s-1POD\s0 to explain the \s-1API\s0.
This allows for the programmatic generation of a clean web page.
.SH "METHODS"
.IX Header "METHODS"
.IP "new( \fI\s-1OPTIONS\s0\fR )" 4
.IX Item "new( OPTIONS )"
This is the class constructor. As is traditional, it returns 
a blessed reference to a \fIFrontier::Responder\fR object. It expects 
arguments to be given like a hash (Perl's named parameter mechanism). 
To be effective, populate the \f(CW\*(C`methods\*(C'\fR parameter with a hashref 
that has \s-1API\s0 procedure names as keys and subroutine references as 
values. See the \s-1SYNOPSIS\s0 for a sample usage.
.IP "\fIanswer()\fR" 4
.IX Item "answer()"
In order to parse the request and execute the procedure, this method
must be called. It returns a \s-1XML\s0 string that contains the procedure's 
response. In a typical \s-1CGI\s0 program, this string will simply be printed
to \s-1STDOUT\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIFrontier::RPC2\fR\|(3)
.PP
<http://www.scripting.com/frontier5/xml/code/rpc.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken MacLeod <ken@bitsko.slc.ut.us> wrote the underlying
\&\s-1RPC\s0 library.
.PP
Joe Johnston <jjohn@cs.umb.edu> wrote an adaptation
of the Frontier::Daemon class to create this \s-1CGI\s0 XML-RPC 
listener class.
